/*######################################################################
# LIBRARIES.
######################################################################*/
#include <Arduino.h>

// Use only core 1 for demo purposes
#if CONFIG_FREERTOS_UNICORE
static const BaseType_t app_cpu = 0;
#else
static const BaseType_t app_cpu = 1;
#endif

// LED rates
static int rate_1 = 0;  // ms
//static const int rate_2 = 323;  // ms

// Pins
static const int led_pin = 12;

// Handle para la tarea necesario para poder referenciar la tarea específica 
TaskHandle_t TaskHandle1 = NULL;
TaskHandle_t TaskHandle2 = NULL;

// Task 1: blink an LED at one rate
void readSerial(void *parameter) {
  while(1) {
    if (Serial.available() > 0) { // Verifica si hay datos disponibles
        String input = Serial.readStringUntil('\n'); // Lee hasta un salto de línea
        Serial.print("Recibido: ");
        Serial.println(input); // Imprime lo recibido
        rate_1 = input.toInt();
    }
  }
}

// Task 2: blink an LED at another rate
void led(void *parameter) {
  while(1) {
    digitalWrite(led_pin, HIGH);
    vTaskDelay(rate_1 / portTICK_PERIOD_MS);
    digitalWrite(led_pin, LOW);
    vTaskDelay(rate_1 / portTICK_PERIOD_MS);
  }
}

void setup() {
  // Configure pin
  pinMode(led_pin, OUTPUT);
    Serial.begin(115200);
  // Task to run forever
  xTaskCreatePinnedToCore(  // Use xTaskCreate() in vanilla FreeRTOS
              readSerial,  // Function to be called
              "Toggle 1",   // Name of task
              1024,         // Stack size (bytes in ESP32, words in FreeRTOS)
              NULL,         // Parameter to pass to function
              1,            // Task priority (0 to configMAX_PRIORITIES - 1)
              &TaskHandle1,  // Task handle
              app_cpu);     // Run on one core for demo purposes (ESP32 only)

  // Task to run forever
  xTaskCreatePinnedToCore(  // Use xTaskCreate() in vanilla FreeRTOS
              led,  // Function to be called
              "Toggle 2",   // Name of task
              1024,         // Stack size (bytes in ESP32, words in FreeRTOS)
              NULL,         // Parameter to pass to function
              1,            // Task priority (0 to configMAX_PRIORITIES - 1)
              &TaskHandle2, // Task handle
              app_cpu);     // Run on one core for demo purposes (ESP32 only)

  // If this was vanilla FreeRTOS, you'd want to call vTaskStartScheduler() in
  // main after setting up your tasks.
}

void loop() {
  // Do nothing
  // setup() and loop() run in their own task with priority 1 in core 1
  // on ESP32
}
