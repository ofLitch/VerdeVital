#include <freertos/FreeRTOS.h>
#include <freertos/task.h>
#include <DHT.h>

#define LED_PIN 5
#define LDR_PIN 2
#define DHT_PIN 4
#define DHT_TYPE DHT11

#if CONFIG_FREERTOS_UNICORE
static const BaseType_t app_cpu = 0;
#else
    static const BaseType_t app_cpu = 1;
#endif

// Estructura para almacenar datos de sensores y RTC
struct SensorData {
    float temperature;
    float humidity;
    int light;
};

void taskToggleLED(void *pvParameters) {
    while (true) {
        Serial.println("LED Apagado");
        digitalWrite(LED_PIN, LOW);
        vTaskDelay(pdMS_TO_TICKS(4000));

        Serial.println("LED Encendido");
        digitalWrite(LED_PIN, HIGH);
        vTaskDelay(pdMS_TO_TICKS(4000));
    }
}

void taskTemperature(void *pvParameters) {
    void **params = (void **)pvParameters;
    SensorData *data = (SensorData *)params[0];
    DHT* dht = (DHT *)params[1];
    float temperature = 0.0;
    while (true) {
        temperature = dht->readTemperature();
        if(!isnan(temperature)) data->temperature = temperature;
        else data->temperature = -1;
        Serial.print("&Temperatura: "); Serial.println(data->temperature);
        vTaskDelay(pdMS_TO_TICKS(1000));
    }
}

void taskHumidity(void *pvParameters) {
    void **params = (void **)pvParameters;
    SensorData *data = (SensorData *)params[0];
    DHT* dht = (DHT *)params[1];
    float humidity = 0.0;
    while (true) {
        humidity = dht->readHumidity();
        if(!isnan(humidity)) data->humidity = humidity;
        else data->humidity = -1;
        Serial.print("&Humedad: "); Serial.println(data->humidity);
        vTaskDelay(pdMS_TO_TICKS(1000));
    }
}

void taskLight(void *pvParameters){
    SensorData *data = (SensorData *)pvParameters;
    int light = 0.0;
    while (true){
        light = analogRead(LDR_PIN);
        if(light >= 0 && light <= 4095) data->light = light;
        else data->light = -1;
        Serial.print("&Luz: "); Serial.println(data->light);
        vTaskDelay(pdMS_TO_TICKS(1000));
    }
}

void taskPrintData(void *pvParameters){
    SensorData *data = (SensorData *)pvParameters;
    while (true){
        Serial.println("------------");
        Serial.print("Temperatura: "); Serial.println(data->temperature);
        Serial.print("Humedad: "); Serial.println(data->humidity);
        Serial.print("Luz: "); Serial.println(data->light);
        Serial.println("------------");
        vTaskDelay(pdMS_TO_TICKS(1500));
    }
}

void setup() {
    Serial.begin(115200);
    pinMode(LED_PIN, OUTPUT);
    pinMode(LED_BUILTIN, OUTPUT);
    digitalWrite(LED_BUILTIN, HIGH);
    pinMode(LDR_PIN, INPUT);

    static DHT dht(DHT_PIN, DHT_TYPE);
    dht.begin();

    // Estructura  de datos
    SensorData data = {0.0, 0.0, 0};

    // Par√°metros 
    void *paramsTemperature[2] = {&data, &dht};
    void *paramsHumidity[2] = {&data, &dht};
    void *paramData = &data;

    // Tareas
    xTaskCreate(taskToggleLED, "Toggle LED", 1024, NULL, 1, NULL);
    xTaskCreate(taskTemperature, "Temperature Function", 2048, paramsTemperature, 3, NULL);
    xTaskCreate(taskHumidity, "Humidity Function", 2048, paramsHumidity, 2, NULL);
    xTaskCreate(taskLight, "Light Sensor", 1024, paramData, 2, NULL);
    xTaskCreate(taskPrintData, "Printing Data", 1024, paramData, 1, NULL);
}

void loop() {}
